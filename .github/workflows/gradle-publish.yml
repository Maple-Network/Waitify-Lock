name: Gradle Package on Release Commit

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Extract Commit Message
      id: commit-message
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        COMMIT_TITLE=$(echo "$COMMIT_MESSAGE" | head -n 1)
        COMMIT_DESCRIPTION=$(echo "$COMMIT_MESSAGE" | tail -n +2 | sed '/^$/d')
        
        if [[ -z "$COMMIT_DESCRIPTION" ]]; then
          echo "No commit description provided."
          COMMIT_DESCRIPTION="No description"
        fi
        
        echo "Commit title: $COMMIT_TITLE"
        echo "Commit description: $COMMIT_DESCRIPTION"
        echo "COMMIT_TITLE=$COMMIT_TITLE" >> $GITHUB_ENV
        echo "COMMIT_DESCRIPTION=$COMMIT_DESCRIPTION" >> $GITHUB_ENV

    - name: Extract APK version
      run: |
        VERSION_NAME=$(grep versionCode app/build.gradle.kts | awk '{print $3}' | tr -d '"')
        echo "APK version: $VERSION_NAME"
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

    - name: Check if Commit is a Release
      run: |
        if [[ "$COMMIT_TITLE" == Release* ]]; then
          echo "Proceeding with release actions..."
        else
          echo "Commit does not start with 'Release'. Skipping release actions."
          exit 78
        fi

    - name: Set up JDK 17
      if: success()
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      if: success()
      uses: gradle/actions/setup-gradle@v3.1.0

    - name: Decode keystore
      run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > my-release-key.jks

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build and Sign APK
      run: ./gradlew assembleRelease
      env:
        KEYSTORE_PATH: ${{ github.workspace }}/my-release-key.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    - name: List APK files
      run: ls -l ${{ github.workspace }}/app/build/outputs/apk/release/

    - name: Create GitHub Release
      id: create_release
      run: |
        RELEASE_TAG=$(date +%Y%m%d%H%M%S) # or use your APK's version
        echo "Creating release $RELEASE_TAG"
        gh release create $RELEASE_TAG \
          --title "$COMMIT_TITLE" \
          --notes "$COMMIT_DESCRIPTION" \
          --draft
        echo "::set-output name=tag_name::$RELEASE_TAG"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload APK to Release
      run: |
        APK_PATH="${{ github.workspace }}/app/build/outputs/apk/release/app-release.apk"
        gh release upload ${{ steps.create_release.outputs.tag_name }} "$APK_PATH" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
